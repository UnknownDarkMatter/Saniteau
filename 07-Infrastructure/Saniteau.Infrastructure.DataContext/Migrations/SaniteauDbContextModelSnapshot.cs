// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Saniteau.Infrastructure.DataContext;

namespace Saniteau.Infrastructure.DataContext.Migrations
{
    [DbContext(typeof(SaniteauDbContext))]
    partial class SaniteauDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.AbonnéModel", b =>
                {
                    b.Property<int>("IdAbonné")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdAdresse")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prénom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tarification")
                        .HasColumnType("int");

                    b.HasKey("IdAbonné");

                    b.ToTable("Abonnés");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.AdresseModel", b =>
                {
                    b.Property<int>("IdAdresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodePostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NuméroEtRue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAdresse");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.AdressePDLModel", b =>
                {
                    b.Property<int>("IdAdressePDL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdAdresse")
                        .HasColumnType("int");

                    b.Property<int>("IdPDL")
                        .HasColumnType("int");

                    b.HasKey("IdAdressePDL");

                    b.ToTable("AdressesPDL");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.AppairageCompteurModel", b =>
                {
                    b.Property<int>("IdAppairageCompteur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateAppairage")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDésappairage")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCompteur")
                        .HasColumnType("int");

                    b.Property<int>("IdPDL")
                        .HasColumnType("int");

                    b.HasKey("IdAppairageCompteur");

                    b.ToTable("AppairagesCompteurs");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.CompteurModel", b =>
                {
                    b.Property<int>("IdCompteur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("CompteurPosé")
                        .HasColumnType("bit");

                    b.Property<string>("NuméroCompteur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCompteur");

                    b.ToTable("Compteurs");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.DelegantModel", b =>
                {
                    b.Property<int>("IdDelegant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateContrat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDelegant");

                    b.ToTable("Delegants");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturationLigneModel", b =>
                {
                    b.Property<int>("IdFacturationLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClasseLigneFacturation")
                        .HasColumnType("int");

                    b.Property<int>("ConsommationM3")
                        .HasColumnType("int");

                    b.Property<int>("IdFacturation")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantEuros")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrixM3")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdFacturationLigne");

                    b.HasIndex("IdFacturation");

                    b.ToTable("FacturationLignes");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturationModel", b =>
                {
                    b.Property<int>("IdFacturation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateFacturation")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAbonné")
                        .HasColumnType("int");

                    b.Property<int>("IdCampagneFacturation")
                        .HasColumnType("int");

                    b.Property<int>("IdDernierIndex")
                        .HasColumnType("int");

                    b.Property<bool>("Payée")
                        .HasColumnType("bit");

                    b.HasKey("IdFacturation");

                    b.HasIndex("IdAbonné");

                    b.ToTable("Facturations");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturePayeeAuDelegantModel", b =>
                {
                    b.Property<int>("IdFacturePayeeAuDelegant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdAbonné")
                        .HasColumnType("int");

                    b.Property<int>("IdFacturation")
                        .HasColumnType("int");

                    b.Property<int>("IdPayeDelegant")
                        .HasColumnType("int");

                    b.HasKey("IdFacturePayeeAuDelegant");

                    b.ToTable("FacturesPayeesAuDelegant");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.IndexCompteurModel", b =>
                {
                    b.Property<int>("IdIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateIndex")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCampagneReleve")
                        .HasColumnType("int");

                    b.Property<int>("IdCompteur")
                        .HasColumnType("int");

                    b.Property<int>("IndexM3")
                        .HasColumnType("int");

                    b.HasKey("IdIndex");

                    b.ToTable("IndexesCompteur");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.IndexPayéParDelegantModel", b =>
                {
                    b.Property<int>("IdIndexPayéParDelegant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdCompteur")
                        .HasColumnType("int");

                    b.Property<int>("IdIndex")
                        .HasColumnType("int");

                    b.Property<int>("IdPayeDelegant")
                        .HasColumnType("int");

                    b.HasKey("IdIndexPayéParDelegant");

                    b.ToTable("IndexesPayésParDelegant");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PDLModel", b =>
                {
                    b.Property<int>("IdPDL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NuméroPDL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPDL");

                    b.ToTable("PDL");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PayeDelegantLigneModel", b =>
                {
                    b.Property<int>("IdPayeDelegantLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Classe")
                        .HasColumnType("int");

                    b.Property<int>("IdPayeDelegant")
                        .HasColumnType("int");

                    b.Property<decimal>("MontantEuros")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPayeDelegantLigne");

                    b.HasIndex("IdPayeDelegant");

                    b.ToTable("PayesDelegantLignes");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PayeDelegantModel", b =>
                {
                    b.Property<int>("IdPayeDelegant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatePaye")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDelegant")
                        .HasColumnType("int");

                    b.HasKey("IdPayeDelegant");

                    b.ToTable("PayesDelegant");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PompeModel", b =>
                {
                    b.Property<int>("IdPompe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdCompteur")
                        .HasColumnType("int");

                    b.Property<string>("NuméroPompe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPompe");

                    b.ToTable("Pompes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturationLigneModel", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.FacturationModel", "Facturation")
                        .WithMany("FacturationLignes")
                        .HasForeignKey("IdFacturation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facturation");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturationModel", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.AbonnéModel", "Abonné")
                        .WithMany()
                        .HasForeignKey("IdAbonné")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abonné");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.Identity.RefreshToken", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PayeDelegantLigneModel", b =>
                {
                    b.HasOne("Saniteau.Infrastructure.DataModel.PayeDelegantModel", "PayeDelegant")
                        .WithMany("LignesPaye")
                        .HasForeignKey("IdPayeDelegant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayeDelegant");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.FacturationModel", b =>
                {
                    b.Navigation("FacturationLignes");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.Identity.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Saniteau.Infrastructure.DataModel.PayeDelegantModel", b =>
                {
                    b.Navigation("LignesPaye");
                });
#pragma warning restore 612, 618
        }
    }
}
